'use client'

import { useState } from 'react'

interface ProcessStep {
  id: number
  title: string
  description: string
  duration: string
  icon: string
  details: string[]
  image: string
}

export default function InstallationProcess() {
  const [activeStep, setActiveStep] = useState(1)

  const steps: ProcessStep[] = [
    {
      id: 1,
      title: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
      description: '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ',
      duration: '1-2 –¥–Ω—è',
      icon: 'üìû',
      details: [
        '–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Å—É–¥–Ω–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π',
        '–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞',
        '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω—Ç–µ–Ω–Ω—ã',
        '–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ —É—Å–ª—É–≥'
      ],
      image: 'üë®‚Äçüíº'
    },
    {
      id: 2,
      title: '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
      description: '–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Å—É–¥–Ω–∞',
      duration: '2-3 –¥–Ω—è',
      icon: 'üìã',
      details: [
        '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
        '–í—ã–±–æ—Ä –º–µ—Å—Ç–∞ –¥–ª—è –∞–Ω—Ç–µ–Ω–Ω—ã',
        '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–±–µ–ª—å–Ω–æ–π —Ç—Ä–∞—Å—Å—ã',
        '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'
      ],
      image: 'üìê'
    },
    {
      id: 3,
      title: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
      description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω—Ç–∞–∂ –∞–Ω—Ç–µ–Ω–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
      duration: '4-8 —á–∞—Å–æ–≤',
      icon: 'üîß',
      details: [
        '–ú–æ–Ω—Ç–∞–∂ –∞–Ω—Ç–µ–Ω–Ω—ã –Ω–∞ —Å—É–¥–Ω–µ',
        '–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª–µ–π',
        '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–º–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞',
        '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
      ],
      image: '‚öôÔ∏è'
    },
    {
      id: 4,
      title: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ',
      description: '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –∏ –æ–±—É—á–∞–µ–º —ç–∫–∏–ø–∞–∂',
      duration: '2-4 —á–∞—Å–∞',
      icon: '‚úÖ',
      details: [
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã',
        '–û–±—É—á–µ–Ω–∏–µ —ç–∫–∏–ø–∞–∂–∞ —Ä–∞–±–æ—Ç–µ —Å —Å–∏—Å—Ç–µ–º–æ–π',
        '–ü–µ—Ä–µ–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –≥–∞—Ä–∞–Ω—Ç–∏–π'
      ],
      image: 'üéì'
    }
  ]

  const totalDuration = steps.reduce((total, step) => {
    const duration = parseInt(step.duration.match(/\d+/)?.[0] || '0')
    return total + duration
  }, 0)

  return (
    <section className="section-padding bg-gray-50">
      <div className="container-max">
        <div className="text-center mb-16">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            –ü—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Starlink
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            –û—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞ - –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
          </p>
          <div className="mt-6 inline-block bg-marine-100 text-marine-800 px-6 py-3 rounded-full font-semibold">
            –û–±—â–µ–µ –≤—Ä–µ–º—è: {totalDuration} –¥–Ω–µ–π
          </div>
        </div>

        <div className="max-w-6xl mx-auto">
          {/* Steps navigation */}
          <div className="flex flex-wrap justify-center gap-4 mb-12">
            {steps.map((step) => (
              <button
                key={step.id}
                onClick={() => setActiveStep(step.id)}
                className={`flex items-center space-x-3 px-6 py-3 rounded-lg font-medium transition-colors ${
                  activeStep === step.id
                    ? 'bg-marine-600 text-white'
                    : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-200'
                }`}
              >
                <span className="text-2xl">{step.icon}</span>
                <div className="text-left">
                  <div className="font-semibold">–≠—Ç–∞–ø {step.id}</div>
                  <div className="text-sm opacity-75">{step.duration}</div>
                </div>
              </button>
            ))}
          </div>

          {/* Active step content */}
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Left side - content */}
              <div className="p-8">
                <div className="flex items-center space-x-4 mb-6">
                  <div className="text-6xl">{steps[activeStep - 1].image}</div>
                  <div>
                    <h3 className="text-2xl font-bold text-gray-900 mb-2">
                      {steps[activeStep - 1].title}
                    </h3>
                    <div className="flex items-center space-x-2 text-marine-600">
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      <span className="font-medium">{steps[activeStep - 1].duration}</span>
                    </div>
                  </div>
                </div>

                <p className="text-gray-600 mb-6 text-lg">
                  {steps[activeStep - 1].description}
                </p>

                <h4 className="font-semibold text-gray-900 mb-4">–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç —ç—Ç–∞–ø:</h4>
                <ul className="space-y-3">
                  {steps[activeStep - 1].details.map((detail, index) => (
                    <li key={index} className="flex items-start space-x-3">
                      <svg className="w-5 h-5 text-marine-500 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      <span className="text-gray-700">{detail}</span>
                    </li>
                  ))}
                </ul>
              </div>

              {/* Right side - visual */}
              <div className="bg-gradient-to-br from-marine-50 to-ocean-50 p-8 flex items-center justify-center">
                <div className="text-center">
                  <div className="w-32 h-32 bg-white rounded-full flex items-center justify-center shadow-lg mb-6">
                    <span className="text-6xl">{steps[activeStep - 1].icon}</span>
                  </div>
                  <h4 className="text-xl font-semibold text-gray-900 mb-2">
                    –≠—Ç–∞–ø {activeStep} –∏–∑ {steps.length}
                  </h4>
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-4">
                    <div 
                      className="bg-gradient-to-r from-marine-500 to-ocean-500 h-2 rounded-full transition-all duration-500"
                      style={{ width: `${(activeStep / steps.length) * 100}%` }}
                    ></div>
                  </div>
                  <p className="text-gray-600">
                    {Math.round((activeStep / steps.length) * 100)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Navigation buttons */}
          <div className="flex justify-between mt-8">
            <button
              onClick={() => setActiveStep(Math.max(1, activeStep - 1))}
              disabled={activeStep === 1}
              className="flex items-center space-x-2 px-6 py-3 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              <span>–ü—Ä–µ–¥—ã–¥—É—â–∏–π</span>
            </button>

            <button
              onClick={() => setActiveStep(Math.min(steps.length, activeStep + 1))}
              disabled={activeStep === steps.length}
              className="flex items-center space-x-2 px-6 py-3 bg-marine-600 text-white rounded-lg hover:bg-marine-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <span>–°–ª–µ–¥—É—é—â–∏–π</span>
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </button>
          </div>
        </div>

        {/* CTA */}
        <div className="text-center mt-16">
          <h3 className="text-2xl font-bold text-gray-900 mb-4">
            –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É?
          </h3>
          <p className="text-gray-600 mb-8 max-w-2xl mx-auto">
            –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <a href="/contact" className="btn-primary">
              –ó–∞–∫–∞–∑–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É
            </a>
            <a href="tel:+78001234567" className="btn-secondary">
              –ü–æ–∑–≤–æ–Ω–∏—Ç—å: +7 (800) 123-45-67
            </a>
          </div>
        </div>
      </div>
    </section>
  )
}
