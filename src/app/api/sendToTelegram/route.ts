import { NextRequest, NextResponse } from 'next/server'

interface TelegramMessage {
  name: string
  phone: string
  email: string
  message: string
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
const lastSentTime = new Map<string, number>()
const messageQueue = new Map<string, TelegramMessage[]>()

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ —á–∞—â–µ 1 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç—É
const RATE_LIMIT_MS = 60 * 1000 // 1 –º–∏–Ω—É—Ç–∞

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
const MAX_MESSAGE_LENGTH = 4096

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function groupMessages(messages: TelegramMessage[]): string {
  if (messages.length === 1) {
    const msg = messages[0]
    return `üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
üë§ –ò–º—è: ${msg.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${msg.phone}
üìß Email: ${msg.email}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${msg.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
  let groupedMessage = `üì© –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ (${messages.length}):\n\n`
  
  messages.forEach((msg, index) => {
    const singleMessage = `${index + 1}. üë§ ${msg.name} | üìû ${msg.phone} | üìß ${msg.email}${msg.message ? ` | üìù ${msg.message.substring(0, 100)}${msg.message.length > 100 ? '...' : ''}` : ''}\n`
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–∏–º–∏—Ç
    if ((groupedMessage + singleMessage).length > MAX_MESSAGE_LENGTH) {
      return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç
    }
    
    groupedMessage += singleMessage
  })

  return groupedMessage
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendToTelegram(message: string, botToken: string, chatId: string) {
  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
  if (message.length > MAX_MESSAGE_LENGTH) {
    const parts = []
    let currentPart = ''
    
    const lines = message.split('\n')
    for (const line of lines) {
      if ((currentPart + line + '\n').length > MAX_MESSAGE_LENGTH) {
        if (currentPart) {
          parts.push(currentPart.trim())
          currentPart = line + '\n'
        } else {
          // –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ–±—Ä–µ–∑–∞–µ–º –µ—ë
          parts.push(line.substring(0, MAX_MESSAGE_LENGTH - 3) + '...')
        }
      } else {
        currentPart += line + '\n'
      }
    }
    
    if (currentPart) {
      parts.push(currentPart.trim())
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
    for (const part of parts) {
      await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: part,
        }),
      })
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 100))
    }
  } else {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
      }),
    })
  }
}

export async function POST(request: NextRequest) {
  try {
    const body: TelegramMessage = await request.json()
    const { name, phone, email, message } = body

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !phone || !email) {
      return NextResponse.json(
        { error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.TELEGRAM_BOT_TOKEN
    const chatId = process.env.TELEGRAM_CHAT_ID

    if (!botToken || !chatId) {
      console.error('TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
      return NextResponse.json(
        { error: 'Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
        { status: 500 }
      )
    }

    const now = Date.now()
    const lastSent = lastSentTime.get(chatId) || 0

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (now - lastSent < RATE_LIMIT_MS) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
      if (!messageQueue.has(chatId)) {
        messageQueue.set(chatId, [])
      }
      messageQueue.get(chatId)!.push(body)

      return NextResponse.json({
        success: true,
        message: '–ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏)'
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    const queuedMessages = messageQueue.get(chatId) || []
    queuedMessages.push(body)
    
    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    messageQueue.delete(chatId)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const groupedMessage = groupMessages(queuedMessages)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendToTelegram(groupedMessage, botToken, chatId)

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    lastSentTime.set(chatId, now)

    return NextResponse.json({
      success: true,
      message: `–ó–∞—è–≤–∫–∞${queuedMessages.length > 1 ? '–∏' : ''} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞${queuedMessages.length > 1 ? '—ã' : ''} –≤ Telegram`
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API sendToTelegram:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}