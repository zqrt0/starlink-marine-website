import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, email, vessel, rating, text } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!name || !email || !vessel || !rating || !text) {
      return NextResponse.json(
        { error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    if (rating < 1 || rating > 5) {
      return NextResponse.json(
        { error: '–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    if (text.length < 10 || text.length > 1000) {
      return NextResponse.json(
        { error: '–û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤' },
        { status: 400 }
      )
    }

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º backend
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤:', {
      name,
      email,
      vessel,
      rating,
      text,
      timestamp: new Date().toISOString(),
      ip: request.ip || request.headers.get('x-forwarded-for') || 'unknown'
    })

    // Mock –æ—Ç–≤–µ—Ç
    const mockResponse = {
      success: true,
      message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      data: {
        id: `testimonial_${Date.now()}`,
        name,
        email,
        vessel,
        rating,
        text,
        status: 'pending', // pending, approved, rejected
        timestamp: new Date().toISOString()
      }
    }

    return NextResponse.json(mockResponse, { status: 200 })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

export async function GET() {
  try {
    // Mock –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–æ–≤
    const testimonials = [
      {
        id: 1,
        name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
        vessel: '–Ø—Ö—Ç–∞ "–ú–æ—Ä—Å–∫–∞—è –∑–≤–µ–∑–¥–∞"',
        location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        text: '–û—Ç–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç! –°–∫–æ—Ä–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, –¥–∞–∂–µ –≤ —à—Ç–æ—Ä–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø—Ä–æ–±–ª–µ–º. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ –ø—Ä—è–º–æ —Å —è—Ö—Ç—ã.',
        rating: 5,
        image: 'üë®‚Äçüíº',
        approved: true,
        timestamp: '2024-01-15T10:30:00Z'
      },
      {
        id: 2,
        name: '–ú–∞—Ä–∏—è –°–æ–∫–æ–ª–æ–≤–∞',
        vessel: '–†—ã–±–æ–ª–æ–≤–Ω–æ–µ —Å—É–¥–Ω–æ "–í–æ–ª–Ω–∞"',
        location: '–ú—É—Ä–º–∞–Ω—Å–∫',
        text: 'Starlink –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª –Ω–∞—à—É —Ä–∞–±–æ—Ç—É. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ—Å—è–∫–∏ —Ä—ã–±—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –±–µ—Ä–µ–≥–æ–º.',
        rating: 5,
        image: 'üë©‚Äçüíº',
        approved: true,
        timestamp: '2024-01-10T14:20:00Z'
      },
      {
        id: 3,
        name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
        vessel: '–ì—Ä—É–∑–æ–≤–æ–µ —Å—É–¥–Ω–æ "–°–µ–≤–µ—Ä"',
        location: '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫',
        text: '–ù–∞–¥–µ–∂–Ω–∞—è —Å–≤—è–∑—å –≤ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. –≠–∫–∏–ø–∞–∂ –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å —Å–µ–º—å—è–º–∏, –∞ –º—ã - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏.',
        rating: 5,
        image: 'üë®‚Äç‚úàÔ∏è',
        approved: true,
        timestamp: '2024-01-05T09:15:00Z'
      }
    ]

    return NextResponse.json({
      success: true,
      data: testimonials
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
